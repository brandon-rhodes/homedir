#!/bin/bash

set -e

if [ "$(id -u)" = "0" ]
then
    echo 'Error: this script should not be run as root' >&2
    exit 1
fi

umask 022
sudo apt-get update

# Avoid "perl" locale errors and the "locale" error:
# locale: Cannot set LC_ALL to default locale: No such file or directory

sudo locale-gen en_US en_US.UTF-8
sudo dpkg-reconfigure --frontend=noninteractive locales

# Install happy packages.

apt-cache search . | awk '{print $1}' > /tmp/all-package-names

for package in \
    adb android-sdk-platform-tools-common `: for backing up an Android phone` \
    apt-file         `: to find where files come from` \
    argyll           `: to color-calibrate my displays` \
    autocutsel       `: unifies the X Windows clipboard and selection` \
    cabextract       `: for extracting binary Windows drivers ` \
    ccache           `: for bypassing inefficient Python extension builds` \
    colordiff wdiff  `: for the occasional need to diff outside of git ` \
    cscope           `: for that rare trawl through C code ` \
    csvkit           `: manipulate data from the command line` \
    dos2unix         `: for removing CR chars or, more rarely, adding them` \
    dvipng           `: so sympy can render to PNG with LaTeX` \
    emacs            `: editor-of-choice` \
    emacs-el         `: readable LISP source` \
    exuberant-ctags  `: ancient source scanning tool` \
    fvwm             `: window manager` \
    fonts-inconsolata `: favorite console font` \
    fonts-sil-gentium `: font for presentation slides` \
    fzf              `: very well-designed interactive selection tool` \
    git              `: distributed version control` \
    golang-go        `: for editor tools like gofmt and go language server` \
    gnome-disk-utility `: to make it easy to reformat flash drives` \
    groff            `: for processing old documents` \
    html2text        `: when data is available in no better format` \
    htop             `: much better "top" command` \
    indicator-cpufreq `: for pegging the CPU speed when I need to` \
    inkscape         `: SVG editing` \
    inotify-tools    `: for waiting on files to change` \
    intel-microcode  `: processor bugfixes, if applicable` \
    libnotify-bin    `: so my scripts can issue desktop notifications` \
    libreadline-dev  `: for compiling Python from source` \
    jq               `: like grep but for JSON` \
    mercurial        `: for running integration tests on uncommitted project` \
    mplayer geeqie   `: for media` \
    openssh-server   `: secure shell` \
    pandoc           `: requirement of nbconvert for the IPython notebook` \
    pcregrep         `: reasonable RE syntax, and can capture groups` \
    pdftk            `: perform various useful operations on PDFs` \
    pm-utils         `: so I can suspend the machine from its command line` \
    pwgen            `: random passwords` \
    pypy pypy-dev    `: for when I want to be fast` \
    python2-dev      `: for when I feel old fashioned` \
    python-pypdf2    `: for HOME/bin/pdfnup` \
    python3 python3-dev `: for when I feel modern` \
    idle-python2.7   `: for showing IDLE and turtle to newcomers` \
    libssl-dev       `: for compiling things that need cryptography` \
    nautilus         `: for mounting and unmounting flash drives` \
    nmap             `: for finding the IP address of printers on the LAN` \
    recordmydesktop  `: for screencasts` \
    ripgrep          `: Emacs Consult has a command that uses this` \
    s3cmd            `: the cloud` \
    subversion       `: for running integration tests on uncommitted project` \
    suckless-tools   `: simple tools to go with my simple window manager` \
    stellarium       `: to quickly answer what-is-that-over-there questions` \
    sqlite3          `: for command-line access to its databases` \
    texlive-latex-recommended `: for building PDF documentation with Sphinx` \
    texlive-latex-extra \
    texlive-fonts-recommended \
    texlive-extra-utils `: to get pdfnup` \
    traceroute       `: when I want something quieter than mtr` \
    trayer           `: lets me click the network manager` \
    tree             `: for when ls is simply not enough` \
    ttf-mscorefonts-installer `: for browsing the web` \
    ttf-ubuntu-font-family `: default Ubuntu font family, for emacs` \
    units            `: desk calculator` \
    vagrant          `: for various virtualization tasks` \
    wakeonlan        `: for waking up other machines I have suspended` \
    whois            `: for searching the domain name registries` \
    wireshark        `: primarily for debugging TCP` \
    xautolock        `: to lock my screen` \
    xbacklight       `: so FVWM key bindings can adjust screen brightness` \
    xclip            `: let shell scripts get and set the paste buffer` \
    xdotool          `: for generating keyboard and mouse actions` \
    xiccd            `: for giving colord the same ICC profile as X atom` \
    xinput           `: set properties of keyboards, mice, trackpads` \
    xfce4-notifyd    `: desktop notifications that I can click to dismiss` \
    xfce4-screenshooter `: for taking screenshots` \
    xserver-xephyr   `: confine apps to a recursive X server in a window` \
    xsnow            `: tis the season` \
    yubikey-manager  `: command line tool` \
    zsh              `: favorite shell` \
    \
    `: Mount remote filesystems` \
    bindfs encfs smbnetfs sshfs \
    \
    `: for building tools like ag and ledger` \
    automake libpcre3-dev pkg-config \
    \
    `: for building Emacs` \
    libx11-dev libgtk2.0-dev \
    \
    `: for lxml` \
    libxml2-dev libxslt1-dev \
    \
    `: Hettinger reminded me how awesome these tools are` \
    graphviz python-blockdiag python-seqdiag python-actdiag python-nwdiag \
    \
    `: Verbatim list of dependencies for pyenv` \
    make build-essential libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
do
    echo $package
done |
    sort - /tmp/all-package-names |
    uniq -c |
    awk '$1 == 2 {print $2}' > /tmp/existing-packages

sudo apt-get install --ignore-missing -y $(cat /tmp/existing-packages)

sudo apt-get purge notify-osd

# Arrange for packages to automatically update.

# sudo apt-get install unattended-upgrades

# sudo dd of=/etc/apt/apt.conf.d/10periodic <<'EOF'
# APT::Periodic::Update-Package-Lists "1";
# APT::Periodic::Download-Upgradeable-Packages "1";
# APT::Periodic::AutocleanInterval "7";
# APT::Periodic::Unattended-Upgrade "1";
# EOF

# Run "apt-file update" for the first time if necessary.

if ! ls /var/cache/apt/apt-file | grep -q .
then
    sudo apt-file update
fi

# Wipe out the default Ubuntu ssh client configuration, in particular to
# turn off its SendEnv settings that send locale variables like LC_PAPER
# even to hosts that cannot digest it.

#sudo dd if=/dev/null of=/etc/ssh/ssh_config

# Docker

#sudo apt-get install linux-image-extra-`uname -r`
#sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9

#sudo sh -c "echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list"
#sudo chmod a+r /etc/apt/sources.list.d/docker.list
#sudo apt-get install lxc-docker
#sudo docker pull ubuntu
#sudo adduser brandon docker

# Shut down the oneconf service to avoid various error messages.

if [ -d /usr/share/oneconf ]
then
    sudo chmod a-x /usr/share/oneconf/oneconf-service
    sudo chmod a-x /usr/share/oneconf/oneconf-query
    sudo chmod a-x /usr/share/oneconf/oneconf-update
    sudo killall -q oneconf-service || true
fi

# Outlaw Ubuntu's terrible "Sorry the application X has stopped
# unexpectedly" popups.

sudo apt-get purge -y apport apport-gtk apport-symptoms python3-apport \
    whoopsie

# A desktop session that simply runs my .xinitrc like in the old days.

sudo dd of=/usr/share/xsessions/xinitrc.desktop <<'EOF'
[Desktop Entry]
Name=xinitrc
Comment=Run your .xinitrc file
Exec=/bin/bash .xinitrc
Type=Application
EOF

sudo chmod 644 /usr/share/xsessions/xinitrc.desktop

# Set my shell.

sudo chsh -s /bin/zsh $USER

# Let everyone suspend or hibernate.

if ! sudo grep -q pm-suspend /etc/sudoers
then
    sudo chmod +w /etc/sudoers
    sudo bash -c 'echo "ALL ALL=NOPASSWD: /usr/sbin/pm-suspend" >> /etc/sudoers'
    sudo bash -c 'echo "ALL ALL=NOPASSWD: /usr/sbin/pm-hibernate" >> /etc/sudoers'
    sudo bash -c 'echo "ALL ALL=NOPASSWD: /bin/kbd_mode" >> /etc/sudoers'
    sudo chmod -w /etc/sudoers
fi

# Enable most sysrq commands.

#sudo sed -i 's/^kernel.sysrq = .*/kernel.sysrq = 246/' \
#     /etc/sysctl.d/10-magic-sysrq.conf

# Tell `/lib/systemd/systemd --user` to exit after I log out.

sudo sed -i 's/#KillUserProcesses=no/KillUserProcesses=yes/' \
    /etc/systemd/logind.conf

# Fix OpenConnect DNS.
# http://rhodesmill.org/brandon/2017/openconnect-split-dns/

sudo mkdir -p /etc/vpnc/connect.d
sudo dd of=/etc/vpnc/connect.d/cisco_split_dns <<'EOF'
# Take each "Cisco split domain" defined by the VPN and add
# it to the "search" line in resolv.conf, so unqualified
# hostnames are searched for in all the subdomains that
# the network architects intended.

if [ -n "$CISCO_SPLIT_DNS" ]; then
    for domain in $(echo "$CISCO_SPLIT_DNS" | sed "s/,/ /g")
    do
        CISCO_DEF_DOMAIN="$CISCO_DEF_DOMAIN
domain $domain"
    done
fi
EOF

# Arrange for a TrackPad to be set to maximum sensitivity.  To check:
#
# cat /sys/devices/platform/i8042/serio1/serio2/sensitivity
# cat /sys/devices/platform/i8042/serio1/serio2/speed

sudo bash -c 'cat > /etc/udev/rules.d/trackpoint.rules' <<'EOF'
SUBSYSTEM=="serio", DRIVERS=="psmouse", DEVPATH="/sys/devices/platform/i8042/serio1/serio2", ATTR{sensitivity}="255", ATTR{speed}="255"
ACTION=="add", SUBSYSTEM=="input", ATTR{name}=="TPPS/2 IBM TrackPoint", ATTR{device/sensitivity}="255", ATTR{speed}="255"
EOF

# Fix hung network connection after a suspend.

sudo dd of=/etc/pm/sleep.d/brandon <<'EOF'
#!/bin/bash

exec >>/tmp/brandon-sleep.log 2>&1

date
echo /etc/pm/sleep.d/brandon invoked with: "$@"

case "$1" in
    "suspend" )
        service network-manager stop
        ;;
    "resume" )
        service network-manager start
        ;;
esac

#(date; echo /lib/systemd/system-sleep/ "$@") >> /tmp/LOG
EOF
sudo chmod +x /etc/pm/sleep.d/brandon

# Enable U2F with a Yubikey.

sudo dd if=$HOME/local/etc/70-u2f.rules.txt \
        of=/etc/udev/rules.d/70-u2f.rules.txt

# Prevent VS Code (as of a late September update?) from repeatedly
# popping up a request every few minutes that I unlock a keyring.

sudo rm -f /usr/libexec/gcr-prompter

# Turn off apt advertisement about "Ubuntu Pro with 'esm-apps' enabled".
# https://wolfgang.lol/snippet/make-ubuntu-shut-up-about-ubuntu-pro-security-updates-tagging-esm-apps-apt-apt-get/
sudo systemctl mask --now ubuntu-advantage
if [ -f /etc/apt/apt.conf.d/20apt-esm-hook.conf ]
then
    sudo mv /etc/apt/apt.conf.d/20apt-esm-hook.conf /etc/apt/apt.conf.d/20apt-esm-hook.conf.bak
fi

# https://askubuntu.com/a/521629/9043

if [ ! -f /etc/systemd/system/ssh-inhibit-sleep.service ]
then
    sudo dd of=/etc/systemd/system/ssh-inhibit-sleep.service <<EOT
[Unit]
Description=Check for running SSH sessions and, if any, inhibit sleep
Before=sleep.target

[Service]
Type=oneshot
ExecStart=/bin/sh -c '! who | grep -qv "\(:0\)"'

[Install]
RequiredBy=sleep.target
EOT
    sudo systemctl enable ssh-inhibit-sleep.service
fi

# Permission on my Lenovo Thinkpad X260 to adjust the backlight brightness.

sudo dd if=$HOME/local/etc/backlight.rules \
        of=/etc/udev/rules.d/backlight.rules
