#!/bin/bash

# Connect to another host via SSH, using a bit of magic to set up all of
# my essential aliases without modifying any remote files.  Any further
# invocations of SSH via "s" from that host should also initialize bash
# and so on through as many connections as I make.

if [ "$TERM" = "alacritty" ]
then
    TERM=xterm  # avoid 'Unsupported SSH client terminal' on DietPi hosts
fi

# If I forget that this is for interactive use and give it a command to
# run instead, then switch to being a simple SSH alias.

if [ -n "$2" ]
then
    exec ssh "$@"
fi

# First, create the configuration script.

read -r -d '' rc <<'EOF'

# Aliases

alias d="diff -ur"
alias e="emacs &"
alias enw="emacs -nw"
alias g="grep -P --color=auto"
alias la="ls -avCF"
alias lf="ls -vCF"
alias ll="ls -lv"
alias lla="ls -alv"
alias ltr="ls -ltr"
alias ltra="ls -ltra"
alias m="less"
alias vs="git diff-vs-master"
alias ,coreon="ulimit -c unlimited"
alias ,coreoff="ulimit -c 0"
ulimit -c 0

# Options for other tools besides bash

export LESS="-i -j.49 -M -R -z-2"
export PAGER=less
export PYTEST_ADDOPTS="--tb=short"

# Bash command line behavior

HISTCONTROL=erasedups
unset histchars
unset TMOUT
unset -f command_not_found_handle
echo set revert-all-at-newline on | bind -f /dev/stdin

# Editor.

if hash emacs24-nox 2>/dev/null
then
    export EDITOR="emacs24-nox"
elif hash emacs 2>/dev/null
then
    export EDITOR="emacs"
fi
export VISUAL="$EDITOR"

# Avoid needing to double-tab to get completions.

bind 'set show-all-if-ambiguous on'

# Custom completions.

function _complete_ssh
{
    local curr_arg hostnames;
    curr_arg=${COMP_WORDS[COMP_CWORD]}
    hostnames="$(awk '/^[0-9a-f]/ {$1="";print}' /etc/hosts)"
    [ -f ~/.ssh/config ] &&
    hostnames="$hostnames $(awk '/Host +[a-z]/ {print $2}' ~/.ssh/config)"
    COMPREPLY=( $(compgen -W "$hostnames" -- $curr_arg ) );
}
complete -F _complete_ssh s ssh

# Local my local commands if I defined any where.

if [ -f .localrc ]
then source .localrc
fi

# Allow jumping to further hosts, using my normal "s" alias for SSH,
# carrying this configuration with us.

rc="$(cat /dev/fd/3)"
function s {
    echo Connecting...
    ssh -t "$1" 'exec /bin/bash --rcfile /dev/fd/3 3<<<'$(printf %q "$rc")
}

EOF

# The "exec" avoids leaving a useless `bash` parent process hanging
# around: the equivalent of shell script tail recursion.

exec ssh -t "$1" -- 'exec /bin/bash --rcfile /dev/fd/3 3<<<'$(printf %q "$rc")
