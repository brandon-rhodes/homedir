[user]
name = Brandon Rhodes
email = brandon@rhodesmill.org

[alias]
a = add -AN
at = rev-parse HEAD
abandon = !b="$(git symbolic-ref --short HEAD)" && [ "$b" != "master" ] && git checkout master && git branch -D "$b"
abort = merge --abort
amend = commit --amend --no-edit
base = merge-base HEAD origin/master
br = "!if [ -n \"$1\" ] ;then git branch \"$@\" ;else git for-each-ref --sort=committerdate refs/heads/ --format=\"%(HEAD) %(color:yellow)%(objectname:short)%(color:reset) %(refname:short) (%(color:green)%(committerdate:relative)%(color:reset))\" ;fi ;:"
cherry-apply = !git cherry-pick --no-commit --allow-empty "$@" && git reset HEAD
ci = commit -v
co = checkout
cleanup = clean -dfx -e .vagrant
d = diff
diff-vs = !git diff -M $(git merge-base HEAD "${1:-main}") -- .
edit = commit --amend --only
h = !man gitrevisions
fetch-pull-request = !git fetch origin pull/$1/head:pull-$1
ff = merge --ff-only
hard = reset --hard
harder = !git hard && git clean -f -d
incoming = remote show origin
l = log --graph --pretty=oneline --abbrev-commit --decorate=short
la = log --graph --pretty=oneline --abbrev-commit --decorate=short --branches --tags --remotes
ll = log --graph --date=short --pretty='%Cgreen%h %Cblue%cd%Creset %s'
lp = -c pager.log='LESSHISTFILE=- less --pattern=^CommitDate:' log -p --pretty=fuller
ls = log --stat --pretty=fuller
patch = commit --patch -v
merge-abort = merge --abort
mine = !cd ${GIT_PREFIX:-.} && git log --stat --pretty=fuller --author="$(git config user.email)"
rmb = "!f(){ \
  for b in \"$@\"; \
  do for r in $(git show-ref $b | awk '{print $2}'); \
     do echo $r; \
        if echo $r | grep -q '^refs/remotes/'; \
        then echo $r | sed 's:refs/remotes/::;s:/: :' \
                     | xargs -n2 git push --delete ; \
        fi; \
        git update-ref -d $r; \
     done; \
  done; \
  };f"
score = diff --shortstat
score-vs-master = !git diff --shortstat $(git merge-base HEAD origin/master) -- .
show-paths = show --pretty="" --name-only
soft = reset HEAD .
squash = !git reset --soft $(git merge-base HEAD origin/master) && git ci
st = status
stash-dammit = stash --include-untracked
tags = tag -l --sort=creatordate --format='%(creatordate:short)  %(refname:short)'
undo = !git reset --soft HEAD~1 && git reset HEAD .
unstage = restore --staged .
up = fetch origin master:master
vtag = !bash -c 'git tag -a \"$@\" -m \"Version $@\" && git push --tags' --
who = "!f () { \
    git log --date='format:%Y-%m' --format='%cd %ae' --since=1.year $@ \
        | sort | uniq -c | awk '{printf(\"%s %4s %s\\n\",$2,$1,$3)}' \
        | sort -n \
        | awk '{t=\"\";if($1!=m)m=t=$1;printf(\"%7s %4s %s\\n\",t,$2,$3)}' ; \
    }; f"
wdiff = diff --color-words=.

[core]
pager = less -FRX
excludesfile = ~/.gitexcludes

[color]
branch = auto
diff = auto
interactive = auto
status = auto

[diff]
noprefix = true

[fetch]
prune = true

[filter "sshconfig_trailer"]
clean = sed '/^. Everything below will be ignored by git.$/q'

[merge]
conflictstyle = diff3
tool = meld

[mergetool "meld"]
# Choose one of these 2 lines (not both!) explained below.
cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
#cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"

[push]
default = current

[include]
path = .gitlocal
